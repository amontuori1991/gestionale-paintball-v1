@using Full_Metal_Paintball_Carmagnola.Models

@{
    ViewData["Title"] = "Gestione Partite";
    var partiteFuture = ViewBag.PartiteFuture as List<Partita>;
    var partitePassate = ViewBag.PartitePassate as List<Partita>;
    var partiteCancellate = ViewBag.PartiteCancellate as List<Partita>;
}

<!-- SweetAlert2 CSS e JS -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
<link href="~/css/partite-responsive.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container-list">
    <div class="list-container">

        <h2>Gestione Partite</h2>

        <p>
            <div class="d-flex justify-content-center gap-2 mb-3 flex-wrap">
                <a class="btn btn-success" href="@Url.Action("Create", "Partite")">➕ Aggiungi Partita</a>
                <a class="btn btn-secondary" href="@Url.Action("Archivio", "Partite")">📂 Archivio</a>
                <a class="btn btn-primary" href="@Url.Action("Semplificata", "Partite")">✨ Visualizzazione Semplificata</a>
            </div>
        </p>


        @Html.Partial("_PartiteTable", partiteFuture, new ViewDataDictionary(ViewData) { { "Titolo", "📅 Prossime Partite" } })

        @Html.Partial("_PartiteTable", partitePassate, new ViewDataDictionary(ViewData) { { "Titolo", "✅ Partite Disputate" } })

        @Html.Partial("_PartiteTable", partiteCancellate, new ViewDataDictionary(ViewData) { { "Titolo", "❌ Partite Annullate" } })

    </div>
</div>

<!-- Modal Riferimento -->
<div class="modal fade" id="riferimentoModal" tabindex="-1" aria-labelledby="riferimentoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Riferimento Prenotazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>
            <div class="modal-body">
                <span id="riferimentoContent"></span>
            </div>
        </div>
    </div>
</div>
<!-- Overlay di attesa per invio recensione -->
<div id="overlay-recensione" style="
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 9999;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    font-weight: bold;
">
    Invio in corso, attendere...
</div>


@section Scripts {
    <script>
        function showRiferimento(rif) {
            const modal = new bootstrap.Modal(document.getElementById('riferimentoModal'));
            document.getElementById('riferimentoContent').textContent = rif ?? "";
            modal.show();
        }

        $(document).ready(function () {

            $('.staff-select').on('change', function () {
                var select = $(this);
                var campo = select.data('campo');
                var partitaId = select.data('partita');
                var valore = select.val();

                console.log("Invio al server:", {
                    id: partitaId,
                    campo: campo,
                    valore: valore
                });

                $.ajax({
                    url: '@Url.Action("AggiornaStaff", "Partite")',
                    method: 'POST',
                    data: { id: partitaId, campo: campo, valore: valore },
                    success: function (response) {
                        if (response.success) {
                            console.log('✔️ Staff aggiornato correttamente');
                        } else {
                            alert(response.message || "Errore durante l'aggiornamento dello staff");
                            console.error("Errore dal server:", response);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Errore durante l\'aggiornamento dello staff');
                        console.error("Dettaglio errore:", error, xhr.responseText);
                    }
                });
            });

        $('.btn-invia-recensione').on('click', function () {
            var partitaId = $(this).data('id');
            Swal.fire({
                title: 'Sei sicuro?',
                text: "Vuoi inviare la richiesta di recensione per la partita selezionata?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Invia',
                cancelButtonText: 'Annulla'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Mostra overlay
                    $('#overlay-recensione').css('display', 'flex');

                    $.ajax({
                        url: '@Url.Action("InviaRecensione", "Partite")',
                        method: 'POST',
                        data: { id: partitaId },
                        success: function (response) {
                            $('#overlay-recensione').hide(); // Nascondi overlay
                            if (response.success) {
                                Swal.fire('Inviato!', response.message || 'Email inviate con successo!', 'success');
                            } else {
                                Swal.fire('Errore', response.message || 'Errore nell\'invio delle email.', 'error');
                            }
                        },
                        error: function () {
                            $('#overlay-recensione').hide(); // Nascondi overlay in caso di errore
                            Swal.fire('Errore', 'Errore nell\'invio delle email.', 'error');
                        }
                    });
                }
            });
        });


            $('.btn-messaggio-prenotazione').on('click', function () {
                var partitaId = $(this).data('id');

                $.ajax({
                    url: '@Url.Action("GeneraMessaggioPrenotazione", "Partite")',
                    method: 'GET',
                    data: { id: partitaId },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Messaggio Prenotazione',
                                // MODIFICA QUI: Usiamo un div con contenteditable="true" e senza replace dei <br>
                                html: `<div id="messaggioTestoSelezionabile" style="width:100%; height:auto; max-height:400px; overflow-y:auto; border:1px solid #ccc; padding:10px; text-align:left; user-select: text; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; white-space: pre-wrap; word-break: break-word;">${response.messaggio}</div>`,
                                icon: 'info',
                                confirmButtonText: 'Chiudi',
                                // Opzionale: Aggiungi un pulsante "Copia"
                                showConfirmButton: true, // Mostra il bottone "Chiudi"
                                showDenyButton: true, // Mostra un secondo bottone per "Copia"
                                denyButtonText: 'Copia Testo',
                                allowOutsideClick: false, // Per evitare chiusure accidentali durante la selezione
                                didOpen: () => {
                                    // Focus sul div per aiutare la selezione, se necessario
                                    document.getElementById('messaggioTestoSelezionabile').focus();
                                },
                                preDeny: () => { // Funzione eseguita prima di premere il bottone "Copia Testo"
                                    const textElement = document.getElementById('messaggioTestoSelezionabile');
                                    if (textElement) {
                                        const range = document.createRange();
                                        range.selectNodeContents(textElement);
                                        const selection = window.getSelection();
                                        selection.removeAllRanges();
                                        selection.addRange(range);

                                        try {
                                            const successful = document.execCommand('copy');
                                            if (successful) {
                                                Swal.fire('Copiato!', 'Il testo è stato copiato negli appunti.', 'success');
                                            } else {
                                                // Fallback per browser che non supportano execCommand (o se fallisce)
                                                console.warn('execCommand fallback fallito, usando navigator.clipboard');
                                                navigator.clipboard.writeText(textElement.innerText).then(() => {
                                                    Swal.fire('Copiato!', 'Il testo è stato copiato negli appunti.', 'success');
                                                }).catch(err => {
                                                    Swal.fire('Errore', 'Impossibile copiare il testo automaticamente. Seleziona manualmente.', 'error');
                                                    console.error('Errore durante la copia tramite clipboard API:', err);
                                                });
                                            }
                                        } catch (err) {
                                            // Fallback per browser che non supportano execCommand
                                            console.warn('execCommand non supportato, usando navigator.clipboard');
                                            navigator.clipboard.writeText(textElement.innerText).then(() => {
                                                Swal.fire('Copiato!', 'Il testo è stato copiato negli appunti.', 'success');
                                            }).catch(err => {
                                                Swal.fire('Errore', 'Impossibile copiare il testo automaticamente. Seleziona manualmente.', 'error');
                                                console.error('Errore durante la copia tramite clipboard API:', err);
                                            });
                                        }
                                    }
                                    return false; // Impedisce la chiusura automatica della modale dopo la copia
                                }
                            });
                        } else {
                            Swal.fire('Errore', response.messaggio || 'Impossibile generare il messaggio.', 'error');
                        }
                    },
                    error: function () {
                        Swal.fire('Errore', 'Errore durante la generazione del messaggio.', 'error');
                    }
                });
            });

        });
                $(document).on('click', '.btn-verifica-presenze', function () {
            var data = $(this).data('data');
            $.get('/Partite/PresenzeStaffPopup', { data: data })
                .done(function (response) {
                    Swal.fire({
                        title: 'Presenze Staff',
                        html: response,
                        width: '600px',
                        showConfirmButton: false
                    });
                })
                .fail(function () {
                    Swal.fire('Errore', 'Impossibile recuperare le presenze.', 'error');
                }); 
        });

    </script>
}