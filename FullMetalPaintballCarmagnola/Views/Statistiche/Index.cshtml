@{
    ViewData["Title"] = "Statistiche";
    var labels = ViewBag.Labels as List<string>;
    var anni = ViewBag.Anni as List<string>;
    var dati = ViewBag.Dati as Dictionary<string, Dictionary<string, int>>;
    var datiCancellati = ViewBag.DatiCancellati as Dictionary<string, Dictionary<string, int>>;

    var colorsConfermate = new string[] { "#0d6efd", "#198754", "#ffc107", "#0dcaf0", "#6f42c1", "#fd7e14" };
    var colorsCancellate = new string[] { "#dc3545", "#b02a37", "#a71d2a", "#870000", "#700000", "#5a0000" };
}

<link href="~/css/statistiche-responsive.css" rel="stylesheet" />

<div class="background-logo"></div>

<div class="statistiche-container">
    <h2>Statistiche Partite per Mese</h2>

    <canvas id="graficoPartite" width="800" height="400"></canvas>

    <hr style="margin-top: 50px; margin-bottom: 50px;" />

    <h2>Riepilogo Totali Partite</h2>

    <table class="summary-table responsive-table">
        <thead>
            <tr>
                <th rowspan="2">Mese</th>
                @foreach (var anno in anni)
                {
                    <th colspan="2">@anno</th>
                }
                <th rowspan="2">Totale Mensile</th>
            </tr>
            <tr>
                @foreach (var anno in anni)
                {
                    <th>Confermate</th>
                    <th>Cancellate</th>
                }
            </tr>
        </thead>
        <tbody>
            @{
                var annualTotalsConfermate = new Dictionary<string, int>();
                var annualTotalsCancellate = new Dictionary<string, int>();
                foreach (var anno in anni)
                {
                    annualTotalsConfermate[anno] = 0;
                    annualTotalsCancellate[anno] = 0;
                }
            }

            @for (int i = 0; i < labels.Count; i++)
            {
                var meseLabel = labels[i];
                var meseKey = (i + 1).ToString("D2");
                int monthlyGrandTotal = 0;

                <tr>
                    <td data-label="Mese">@meseLabel</td>
                    @foreach (var anno in anni)
                    {
                        var confermate = dati.ContainsKey(anno) && dati[anno].ContainsKey(meseKey) ? dati[anno][meseKey] : 0;
                        var cancellate = datiCancellati != null && datiCancellati.ContainsKey(anno) && datiCancellati[anno].ContainsKey(meseKey) ? datiCancellati[anno][meseKey] : 0;

                        <td data-label="Confermate @anno">@confermate</td>
                        <td data-label="Cancellate @anno">@cancellate</td>

                        annualTotalsConfermate[anno] += confermate;
                        annualTotalsCancellate[anno] += cancellate;
                        monthlyGrandTotal += (confermate + cancellate);
                    }
                    <td data-label="Totale Mensile" class="total-column">@monthlyGrandTotal</td>
                </tr>
            }
            <tr class="total-row">
                <th data-label="Totale Anno">Totale Anno</th>
                @foreach (var anno in anni)
                {
                    <td data-label="Confermate @anno">@annualTotalsConfermate[anno]</td>
                    <td data-label="Cancellate @anno">@annualTotalsCancellate[anno]</td>
                }
                <td></td>
            </tr>

        </tbody>
    </table>

</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const labels = @Html.Raw(Json.Serialize(labels));
    const datasets = [];

    @for (var i = 0; i < anni.Count; i++)
    {
            var anno = anni[i];
            var confermateValues = new List<int>();
            var cancellateValues = new List<int>();

            for (int mese = 1; mese <= 12; mese++)
            {
                    var key = mese.ToString("D2");
                    int confermate = dati.ContainsKey(anno) && dati[anno].ContainsKey(key) ? dati[anno][key] : 0;
                    int cancellate = datiCancellati != null && datiCancellati.ContainsKey(anno) && datiCancellati[anno].ContainsKey(key) ? datiCancellati[anno][key] : 0;

                    confermateValues.Add(confermate);
                    cancellateValues.Add(cancellate);
            }

            var colorIndex = i % colorsConfermate.Length;

            <text>
            datasets.push({
                label: 'Anno @anno - Confermate',
                data: [@string.Join(",", confermateValues)],
                backgroundColor: '@colorsConfermate[colorIndex]',
                stack: '@anno',
                borderWidth: 1
            });
            datasets.push({
                label: 'Anno @anno - Cancellate',
                data: [@string.Join(",", cancellateValues)],
                backgroundColor: '@colorsCancellate[colorIndex]',
                stack: '@anno',
                borderWidth: 1
            });
            </text>
    }

    const config = {
        type: 'bar',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Confronto Partite Mese per Mese (Anni)'
                }
            },
            scales: {
                x: {
                    stacked: true
                },
                y: {
                    beginAtZero: true,
                    stacked: true,
                    title: {
                        display: true,
                        text: 'Numero Partite'
                    }
                }
            }
        }
    };

    const ctx = document.getElementById('graficoPartite').getContext('2d');
    new Chart(ctx, config);
</script>
